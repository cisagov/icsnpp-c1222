module C1222;

# Copyright 2024 Battelle Energy Alliance, LLC

################################################################################
##
## ICSNPP - ANS1 C12.22
## 
## This file defines the ICSNPP ANS1 C12.22 Parser as defined in the specification
## IEEE Std 1703-2012, IEEE Standard for Local Area Network/Wide Area Network 
## (LAN/WAN) Node Communication Protocol to Complement the Utility Industry 
## End Device Data Tables.
##
## Payton Harmon, Idaho National Lab,  2024
##
################################################################################


import spicy;
import C1222_ENUMS;
import C1222_FUNCTIONS;

################################################################################
## Global Variables
################################################################################


#- Authentication Value --------------------------------------------------------
# in 5.3.4.8 Calling Authentication Value Element (ACH)
# 0 = none
# 1 = c1221
# 2 = c1222
public global authSetting: uint8 = 0;


#- Encrypted Status ------------------------------------------------------------
# Used to keep track if EPSEM data is encrypted.
# Gathered from 5.3.3 epsem-control bit 2 to 3.
public global isEncrypted: bool = False;


#- Command Context -------------------------------------------------------------
# Used to provide EPSEM reponses context on the request made prior.
public global commandContext : vector<uint8>;

#- Session Context -------------------------------------------------------------
# Used to determine if a EPSEM session is established
public global sessionContext: uint8;


################################################################################
## 5.3.4 Association Control Service Element (ASCE) 
################################################################################

#- Top Level Message -----------------------------------------------------------
public type Message = unit {
    var success : bool = True;

    : AscePdu[] foreach {
        print commandContext;
    }

    on %error(msg: string){
        print "ERROR: %s" % msg;
    }

};

#- 5.3.4 <asce-pdu> Pg. 49 -----------------------------------------------------
type AscePdu = unit {
    tag         : uint8;
    len         : LengthType;
    elements    : Element[] &size=self.len.len;

    #on %done {print self; print "\n";}

};

#- 5.3.4 <elements> Pg. 49 -----------------------------------------------------
type Element = unit {
    tag : uint8 &convert=C1222_ENUMS::AsceElementTags($$);

    switch (self.tag) {
        C1222_ENUMS::AsceElementTags::APPLICATION_CONTEXT                    -> applicationContext : ApplicationContext;
        C1222_ENUMS::AsceElementTags::CALLED_AP_TITLE                        -> calledApTitle : CalledApTitle;
        C1222_ENUMS::AsceElementTags::CALLED_AP_INVOCATION_ID                -> calledApInvocationId : CalledApInvocationID;
        C1222_ENUMS::AsceElementTags::CALLING_AP_TITLE                       -> callingApTitle : CallingAPTitle;
        C1222_ENUMS::AsceElementTags::CALLING_APPLICATION_ENTITY_QUALIFIER   -> callingApplicationEntityQualifier : CallingApplicationEntityQualifier;
        C1222_ENUMS::AsceElementTags::CALLING_AP_INVOCATION_ID               -> callingApInvocationId : CallingAPInvocationID;
        C1222_ENUMS::AsceElementTags::CALLING_AUTHENTICATION_VALUE           -> callingAuthenticationValue : CallingAuthenticationValue;
        C1222_ENUMS::AsceElementTags::MECHANISM_NAME                         -> mechanismName : MechanismName;
        C1222_ENUMS::AsceElementTags::USER_INFORMATION                       -> userInformation : UserInformation;

        * -> : NotImplemented();

    };
};

#- 5.3.4.1 <aSO-context-element> Pg. 49 ----------------------------------------
type ApplicationContext = unit {
    len             : LengthType;
    asoContextTag   : uint8;
    asoContext      : ID;
};

#- 5.3.4.2 <called-AP-title-element> Pg. 50 ------------------------------------
type CalledApTitle = unit {
    len      : LengthType;
    apTitle  : ID;
};


#- 5.3.4.3 <calling-AP-title-element> Pg. 50 -----------------------------------
type CallingAPTitle = unit {
    len      : LengthType;
    apTitle  : ID;
};

#- 5.3.4.6 <calling-AE-qualifier-element> Pg. 51 -------------------------------
type CallingApplicationEntityQualifier = unit {
    integerLen              : LengthType;
    integerTag              : uint8;
    callingAeQualifierLen   : LengthType;
    callingAeQualifier      : bitfield(8){
        TEST            : 0 &convert=cast<bool>($$);
        URGENT          : 1 &convert=cast<bool>($$);
        NOTIFICATION    : 2 &convert=cast<bool>($$);
        RESERVED        : 3..7 &convert=cast<uint8>($$);
    };
};

#- 5.3.4.7 <mechanism-name-element> Pg. 52 -------------------------------------
type MechanismName = unit {
    len     : LengthType;
    name    : UniversalObjectIdentifier(self.len.len);
};

#- 5.3.4.8 <calling-authentication-value-element> Pg. 53 -----------------------
type CallingAuthenticationValue = unit {
    len                 : LengthType;
    externalTag         : uint8;
    eternalLen          : LengthType;
    indirectReference   : CAVIndirectRef &try;
    encodingTag         : uint8 &convert=C1222_ENUMS::EncodingTags($$);

    switch (self.encodingTag){
        C1222_ENUMS::EncodingTags::ASN1  -> singleAsn1   : CAVSingleAsn1;
        C1222_ENUMS::EncodingTags::OCTET -> octetAligned : CAVOctetAligned;

        * -> : NotImplemented();
    };
};

#- 5.3.4.8 <calling-authentication-value-octet-aligned> Pg. 54 -----------------
type CAVOctetAligned = unit {
    len     : LengthType;
    octets  : bytes &size=self.len.len;
};

#- 5.3.4.8 <calling-authentication-value-indirect-reference> Pg. 53 ------------
type CAVIndirectRef = unit {
    a: uint8 {
        if($$ != 0x02)
            self.backtrack();
    }
    b: uint8 {
        if($$ != 0x01)
            self.backtrack();
    }
    c: uint8 {
        if($$ != 0x00)
            self.backtrack();
    }
};

#- 5.3.4.8 <calling-authentication-value-single-asn1> Pg. 53 -------------------
type CAVSingleAsn1 = unit {
    len             : LengthType;
    mechanismTag    : uint8 &convert=C1222_ENUMS::EncodingASN1Tags($$);

    switch (self.mechanismTag){
        C1222_ENUMS::EncodingASN1Tags::C1222 -> c1222Encoding: CallingAuthValC1222;
        C1222_ENUMS::EncodingASN1Tags::C1221 -> c1221Encoding: CallingAuthValC1221;
        
        #undefined encoding
        * -> unimplementedValue: bytes &size=self.len.len - 1;
    };
};

#- 5.3.4.8.1 <calling-authentication-value-c1222> Pg. 54 -----------------------
type CallingAuthValC1222 = unit {
    len     : LengthType;
    keyId   : KeyID &try;
    iv      : IV;

    on %init() {
        authSetting = 2;
    }
};

#- 5.3.4.8.1 <key-id-element> Pg. 55 -------------------------------------------
type KeyID = unit {
    tag: uint8 {
        if ($$ != 0x80)
            self.backtrack();
    }
    len     : LengthType;
    keyId   : uint8;
};

#- 5.3.4.8.1 <iv-element> Pg. 55 -----------------------------------------------
type IV = unit {
    tag : uint8;
    len : LengthType;
    iv  : uint32;
};

#- 5.3.4.8.2 <calling-authentication-value-c1221> Pg. 57 -----------------------
type CallingAuthValC1221 = unit {
    len : LengthType;
    msg : uint8 &convert=C1222_ENUMS::EncodingC1221Tags($$);

    switch (self.msg){
        C1222_ENUMS::EncodingC1221Tags::IDENT    -> authIdent: C1221AuthIdent;
        C1222_ENUMS::EncodingC1221Tags::REQUEST  -> authReq  : C1221AuthReq;
        C1222_ENUMS::EncodingC1221Tags::RESPONSE -> authResp : C1221AuthResp;
        
        * -> : NotImplemented();
    };

    on %init() {
        authSetting = 2;
    }
};

#- 5.3.4.8.2 <c1221-auth-identification-octet-string> Pg. 58 -------------------
type C1221AuthIdent = unit {
    len : LengthType;

    # Listed in c1221 spec and not implemented in this parser.
    authService : bytes &size=self.len.len;
};

#- 5.3.4.8.2 <c1221-auth-request-octet-string> Pg. 58 --------------------------
type C1221AuthReq = unit {
    len : LengthType;

    # Listed in c1221 spec and not implemented in this parser.
    authReq : bytes &size=self.len.len;
};

#- 5.3.4.8.2 <c1221-auth-response-octet-string> Pg. 58 -------------------------
type C1221AuthResp = unit {
    len : LengthType;

    # Listed in c1221 spec and not implemented in this parser.
    authResp    : bytes &size=self.len.len;
};

#- 5.3.4.9 <called-AP-invocation-id-element> Pg. 59 ----------------------------
type CalledApInvocationID = unit {
    len     : LengthType;
    intTag  : uint8;
    idLen   : LengthType;
    id      : bytes &size=self.idLen.len;

};

#- 5.3.4.10 <calling-AP-invocation-id-element> Pg. 60 --------------------------
type CallingAPInvocationID = unit {
    len     : LengthType;
    intTag  : uint8;
    idLen   : LengthType;
    id      : bytes &size=self.idLen.len;
};

#- 5.3.4.11 <user-information-element> Pg. 62 ----------------------------------
type UserInformation = unit {
    externalLen         : LengthType;
    externalTag         : uint8;
    len                 : LengthType;
    indirectReference   : UserIndirectRef &try;
    octetTag            : uint8;
    userInfoLen         : LengthType;
    epsem               : Epsem(self.userInfoLen.len);
    footer              : UserInformationFooter if(authSetting == 2);

    #on external_len {print "external_len: "; print self.external_len.len; print "";}
    #on external_tag {print "external_tag: "; print self.external_tag; print "";}
    #on len {print "len: "; print self.len.len; print "";}
    #on indirect_reference {print "indirect_ref: "; print self.indirect_reference; print "";}
    #on octet_tag {print "octet_tag: "; print self.octet_tag; print "";}
    #on user_info_len {print "user_info_len: "; print self.user_info_len.len; print "";}
    #on epsem {print "epsem: "; print self.epsem; print "";}
    #on footer {print "footer: "; print self.footer; print "";}
};

#- 5.3.4.11 <mac> Pg. 63 -------------------------------------------------------
type UserInformationFooter = unit {
    var mac: string;
    var padding: bytes;

    data : bytes &eod;

    on %finally {
        local dataSize: uint64 = |self.data|;

        if (dataSize > 4) {
            self.padding = self.data.sub(0, dataSize - 4); # grab everything before the last four bytes
        }

        local macBytes: bytes = self.data.sub(dataSize - 4, dataSize); # grab the last four bytes
        self.mac = C1222_FUNCTIONS::bytesToHexString(macBytes); # convert to hex string
    }
};

#- 5.3.4.11 <user-information-indirect-reference> Pg. 62 -----------------------
type UserIndirectRef = unit {
    tag: uint8 {
        if ($$ != 0x02)
            self.backtrack();
    }
    len         : LengthType;
    encoding    : uint8;
};

################################################################################
## 5.3.3 EPSEM Envelop Structure 
################################################################################

#- 5.3.3 <epsem> Pg. 47 --------------------------------------------------------
type Epsem = unit(len: uint64) {

    epsemControl    : bitfield (8) {
        responseControl     : 0..1;
        securityMode        : 2..3;
        edClassIncluded     : 4;
        proxyServiceUsed    : 5;
        recoverySession     : 6;
    };
    edClass         : bytes &size=4 if (self.epsemControl.edClassIncluded == 1);

    #if 2
    encryptedEpsem  : bytes &size= len - 5
        if(self.epsemControl.securityMode == 2);
    #if 1 or 0
    data            : PlaintextEpsem
        if(self.epsemControl.securityMode == 1 || self.epsemControl.securityMode == 0);

    on epsemControl {
        if (self.epsemControl.securityMode == 2){
            isEncrypted = True;
        }
        else{
            isEncrypted = False;
        }
    }

};

type PlaintextEpsem = unit{
    data: EpsemService[];
    : b"\x00";
};


################################################################################
## 5.3.2 EPSEM 
################################################################################

type EpsemService = unit() {
    len     : C1222::LengthType;
    service : Service(self.len.len) if(self.len.len != 0x00);
};

type Service = unit(len: uint64){
    serviceTag: uint8 &convert=C1222_ENUMS::RequestResponseCodes($$);

    switch (self.serviceTag){
        C1222_ENUMS::RequestResponseCodes::OK            -> ok           : ResponseOk(len -1);
        C1222_ENUMS::RequestResponseCodes::ERR           -> err          : ResponseNok(self.serviceTag, len-1);
        C1222_ENUMS::RequestResponseCodes::SNS           -> sns          : ResponseNok(self.serviceTag, len-1);
        C1222_ENUMS::RequestResponseCodes::ISC           -> isc          : ResponseNok(self.serviceTag, len-1);
        C1222_ENUMS::RequestResponseCodes::ONP           -> onp          : ResponseNok(self.serviceTag, len-1);
        C1222_ENUMS::RequestResponseCodes::IAR           -> iar          : ResponseNok(self.serviceTag, len-1);
        C1222_ENUMS::RequestResponseCodes::BSY           -> bsy          : ResponseNok(self.serviceTag, len-1);
        C1222_ENUMS::RequestResponseCodes::DNR           -> dnr          : ResponseNok(self.serviceTag, len-1);
        C1222_ENUMS::RequestResponseCodes::DLK           -> dlk          : ResponseNok(self.serviceTag, len-1);
        C1222_ENUMS::RequestResponseCodes::RNO           -> rno          : ResponseNok(self.serviceTag, len-1);
        C1222_ENUMS::RequestResponseCodes::ISSS          -> isss         : ResponseNok(self.serviceTag, len-1);
        C1222_ENUMS::RequestResponseCodes::SME           -> sme          : ResponseNok(self.serviceTag, len-1);
        C1222_ENUMS::RequestResponseCodes::UAT           -> uat          : ResponseNok(self.serviceTag, len-1);
        C1222_ENUMS::RequestResponseCodes::NETT          -> nett         : ResponseNok(self.serviceTag, len-1);
        C1222_ENUMS::RequestResponseCodes::NETR          -> netr         : ResponseNok(self.serviceTag, len-1);
        C1222_ENUMS::RequestResponseCodes::RQTL          -> rqtl         : ResponseNok(self.serviceTag, len-1);
        C1222_ENUMS::RequestResponseCodes::RSTL          -> rstl         : ResponseNok(self.serviceTag, len-1);
        C1222_ENUMS::RequestResponseCodes::SGNP          -> sgnp         : ResponseNok(self.serviceTag, len-1);
        C1222_ENUMS::RequestResponseCodes::SGERR         -> sgerr        : ResponseNok(self.serviceTag, len-1);
        C1222_ENUMS::RequestResponseCodes::IDENT         -> identify     : void;
        C1222_ENUMS::RequestResponseCodes::FULLREAD      -> fullread     : uint16;
        C1222_ENUMS::RequestResponseCodes::PREADONE      -> preadone     : ReadReqPRead(1);
        C1222_ENUMS::RequestResponseCodes::PREADTWO      -> preadtwo     : ReadReqPRead(2);
        C1222_ENUMS::RequestResponseCodes::PREADTHREE    -> preadthree   : ReadReqPRead(3);
        C1222_ENUMS::RequestResponseCodes::PREADFOUR     -> preadfour    : ReadReqPRead(4);
        C1222_ENUMS::RequestResponseCodes::PREADFIVE     -> preadfive    : ReadReqPRead(5);
        C1222_ENUMS::RequestResponseCodes::PREADSIX      -> preadsix     : ReadReqPRead(6);
        C1222_ENUMS::RequestResponseCodes::PREADSEVEN    -> preadseven   : ReadReqPRead(7);
        C1222_ENUMS::RequestResponseCodes::PREADEIGHT    -> preadeight   : ReadReqPRead(8);
        C1222_ENUMS::RequestResponseCodes::PREADNINE     -> preadnine    : ReadReqPRead(9);
        C1222_ENUMS::RequestResponseCodes::PREADDEFAULT  -> preaddefault : void;
        C1222_ENUMS::RequestResponseCodes::PREADOFFSET   -> preadoffset  : ReadReqPReadOffset;
        C1222_ENUMS::RequestResponseCodes::FULLWRITE     -> fullwrite    : WriteReqFull;
        C1222_ENUMS::RequestResponseCodes::PWRITEONE     -> pwriteone    : WriteReqPWrite(1);
        C1222_ENUMS::RequestResponseCodes::PWRITETWO     -> pwritetwo    : WriteReqPWrite(2);
        C1222_ENUMS::RequestResponseCodes::PWRITETHREE   -> pwritethree  : WriteReqPWrite(3);
        C1222_ENUMS::RequestResponseCodes::PWRITEFOUR    -> pwritefour   : WriteReqPWrite(4);
        C1222_ENUMS::RequestResponseCodes::PWRITEFIVE    -> pwritefive   : WriteReqPWrite(5);
        C1222_ENUMS::RequestResponseCodes::PWRITESIX     -> pwritesix    : WriteReqPWrite(6);
        C1222_ENUMS::RequestResponseCodes::PWRITESEVEN   -> pwriteseven  : WriteReqPWrite(7);
        C1222_ENUMS::RequestResponseCodes::PWRITEEIGHT   -> pwriteeight  : WriteReqPWrite(8);
        C1222_ENUMS::RequestResponseCodes::PWRITENINE    -> pwritenine   : WriteReqPWrite(9);
        C1222_ENUMS::RequestResponseCodes::PWRITEOFFSET  -> pwriteoffset : WriteReqOffset;
        C1222_ENUMS::RequestResponseCodes::LOGON         -> logon        : LogonReq;
        C1222_ENUMS::RequestResponseCodes::SECURITY      -> security     : SecurityReq;
        C1222_ENUMS::RequestResponseCodes::LOGOFF        -> logoff       : void;
        C1222_ENUMS::RequestResponseCodes::TERMINATE     -> terminate    : void;
        C1222_ENUMS::RequestResponseCodes::DISCONNECT    -> disconnect   : void;
        C1222_ENUMS::RequestResponseCodes::WAIT          -> wait         : WaitReq;
        C1222_ENUMS::RequestResponseCodes::REGISTER      -> register     : RegisterReq;
        C1222_ENUMS::RequestResponseCodes::DEREGISTER    -> deregister   : DeregisterReq;
        C1222_ENUMS::RequestResponseCodes::RESOLVE       -> resolve      : ResolveReq;
        C1222_ENUMS::RequestResponseCodes::TRACE         -> trace        : Trace(len-1);

        * -> : NotImplemented();
    };

    on identify{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on preadtwo{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on preadone{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on fullread{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on preadthree{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on preadfour{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on preadfive{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on preadsix{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on preadseven{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on preadeight{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on preadnine{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on preaddefault{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on preadoffset{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on fullwrite{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on pwriteone{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on pwritetwo{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on pwritethree{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on pwritefour{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on pwritefive{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on pwritesix{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on pwriteseven{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on pwriteeight{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on pwritenine{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on pwriteoffset{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on logon{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on security{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on logoff{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on terminate{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on disconnect{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on wait{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on register{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on deregister{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on resolve{commandContext.push_back(cast<uint8>(self.serviceTag));}
    on trace{commandContext.push_back(cast<uint8>(self.serviceTag));}
};

type ResponseOk = unit(len : uint64) {
    
    var command : C1222_ENUMS::RequestResponseCodes;
    

    switch (self.command){
        C1222_ENUMS::RequestResponseCodes::IDENT         -> identify     : ResponseOkIdent;
        C1222_ENUMS::RequestResponseCodes::FULLREAD      -> fullread     : ReadRespOk(1);
        C1222_ENUMS::RequestResponseCodes::PREADONE      -> preadone     : ReadRespOk(1);
        C1222_ENUMS::RequestResponseCodes::PREADTWO      -> preadtwo     : ReadRespOk(2);
        C1222_ENUMS::RequestResponseCodes::PREADTHREE    -> preadthree   : ReadRespOk(3);
        C1222_ENUMS::RequestResponseCodes::PREADFOUR     -> preadfour    : ReadRespOk(4);
        C1222_ENUMS::RequestResponseCodes::PREADFIVE     -> preadfive    : ReadRespOk(5);
        C1222_ENUMS::RequestResponseCodes::PREADSIX      -> preadsix     : ReadRespOk(6);
        C1222_ENUMS::RequestResponseCodes::PREADSEVEN    -> preadseven   : ReadRespOk(7);
        C1222_ENUMS::RequestResponseCodes::PREADEIGHT    -> preadeight   : ReadRespOk(8);
        C1222_ENUMS::RequestResponseCodes::PREADNINE     -> preadnine    : ReadRespOk(9);
        C1222_ENUMS::RequestResponseCodes::PREADDEFAULT  -> preaddefault : ReadRespOk(1);
        C1222_ENUMS::RequestResponseCodes::PREADOFFSET   -> preadoffset  : ReadRespOk(1);
        C1222_ENUMS::RequestResponseCodes::FULLWRITE     -> fullwrite    : void;
        C1222_ENUMS::RequestResponseCodes::PWRITEONE     -> pwriteone    : void;
        C1222_ENUMS::RequestResponseCodes::PWRITETWO     -> pwritetwo    : void;
        C1222_ENUMS::RequestResponseCodes::PWRITETHREE   -> pwritethree  : void;
        C1222_ENUMS::RequestResponseCodes::PWRITEFOUR    -> pwritefour   : void;
        C1222_ENUMS::RequestResponseCodes::PWRITEFIVE    -> pwritefive   : void;
        C1222_ENUMS::RequestResponseCodes::PWRITESIX     -> pwritesix    : void;
        C1222_ENUMS::RequestResponseCodes::PWRITESEVEN   -> pwriteseven  : void;
        C1222_ENUMS::RequestResponseCodes::PWRITEEIGHT   -> pwriteeight  : void;
        C1222_ENUMS::RequestResponseCodes::PWRITENINE    -> pwritenine   : void;
        C1222_ENUMS::RequestResponseCodes::PWRITEOFFSET  -> pwriteoffset : void;
        C1222_ENUMS::RequestResponseCodes::LOGON         -> logon        : LogonResp;
        C1222_ENUMS::RequestResponseCodes::SECURITY      -> security     : void;
        C1222_ENUMS::RequestResponseCodes::LOGOFF        -> logoff       : void;
        C1222_ENUMS::RequestResponseCodes::TERMINATE     -> terminate    : void;
        C1222_ENUMS::RequestResponseCodes::DISCONNECT    -> disconnect   : void;
        C1222_ENUMS::RequestResponseCodes::WAIT          -> wait         : void;
        C1222_ENUMS::RequestResponseCodes::REGISTER      -> register     : RegisterRespOk;
        C1222_ENUMS::RequestResponseCodes::DEREGISTER    -> deregister   : void;
        C1222_ENUMS::RequestResponseCodes::RESOLVE       -> resolve      : ResolveRespOk;
        C1222_ENUMS::RequestResponseCodes::TRACE         -> trace        : Trace(len);

        * -> : NotImplemented();
    };

    on %init{
        self.command = C1222_ENUMS::RequestResponseCodes(commandContext.front());
    }

    on %done{
        C1222_FUNCTIONS::popFront();
    }
};

type ResponseNok = unit(code: C1222_ENUMS::RequestResponseCodes, len: uint64){
    
    var command : C1222_ENUMS::RequestResponseCodes;
    var actualLength : uint64 = len;
    
    maxRequestSize  : uint32 if(code == C1222_ENUMS::RequestResponseCodes::RQTL);
    maxResponseSize : uint32 if(code == C1222_ENUMS::RequestResponseCodes::RSTL);
    sigerrResp      : bytes &size=self.actualLength if(code == C1222_ENUMS::RequestResponseCodes::SGERR);

    trace           : Trace(self.actualLength) if((self.command == C1222_ENUMS::RequestResponseCodes::TRACE ) && (code != C1222_ENUMS::RequestResponseCodes::SGERR));

    on maxRequestSize{
        if(code == C1222_ENUMS::RequestResponseCodes::RQTL){
            self.actualLength -= 4;
        }
    }

    on maxResponseSize{
        if(code == C1222_ENUMS::RequestResponseCodes::RSTL){
            self.actualLength -= 4;
        }
    }

    on %init{
        self.command = C1222_ENUMS::RequestResponseCodes(commandContext.front());
    }
        
    on %done{
        C1222_FUNCTIONS::popFront();
    }
};

#- 5.3.2.4.1 Identification Service <ident-r><ok> Pg. 22 -----------------------
type ResponseOkIdent = unit {
    std         : uint8;
    ver         : uint8;
    rev         : uint8;
    features    : IdentFeature[] &until=0x00;
    eol         : uint8;
};

#- 5.3.2.4.1 Identification Service <feature> Pg. 22 ---------------------------
type IdentFeature = unit {
    tag : uint8 &convert=C1222_ENUMS::IdentFeatureTags($$);

    switch(self.tag){
        C1222_ENUMS::IdentFeatureTags::SECURITY_MECHANISM    -> securityMechanism    : ID;
        C1222_ENUMS::IdentFeatureTags::SESSION_CTRL          -> sessionCtrl          : IdentSessionCtrl; 
        C1222_ENUMS::IdentFeatureTags::DEVICE_CLASS          -> deviceClass          : ID;
        C1222_ENUMS::IdentFeatureTags::DEVICE_IDENTITY       -> deviceIdentity       : IdentDeviceIdentity;

        * -> : NotImplemented();
    };
};

#- 5.3.2.4.1 Identification Service <session-ctrl> Pg. 23 ----------------------
type IdentSessionCtrl = unit {
    sessionCtrl: bitfield(8) {
        nbrSessionSupported     : 0..6 &convert=cast<uint8>($$);
        sessionlessSupported    : 7 &convert=cast<bool>($$);
    };
};

#- 5.3.2.4.1 Identification Service <device-identity> Pg. 24 -------------------
type IdentDeviceIdentity = unit {
    len             : uint8;
    format          : uint8;
    identification  : bytes &size=self.len-1;
};

#- 5.3.2.4.2 Read Service <pread-index> Pg. 25 ---------------------------------
type ReadReqPRead = unit(count: uint64) {
    tableid         : uint16;
    index           : uint16[count];
    elementCount    : uint16;
};

#- 5.3.2.4.2 Read Service <pread-offset> Pg. 25 --------------------------------
type ReadReqPReadOffset = unit {
    tableid     : uint16;
    offset      : bytes &size=3;
    octetCount  : uint16;
};

#- 5.3.2.4.2 Read Service <read-r><ok> Pg. 26 ----------------------------------
type ReadRespOk = unit(count: uint64){
    var extracount  : uint64 = 0;
    var i           : uint64 = 0;
    tables          : TableData[count] foreach{
        if(self.tables[self.i].count_m == 0xFFFF){
            self.extracount = self.extracount + 1;
        }
        self.i = self.i + 1;
    }
    extratables     : TableData[self.extracount] if (self.extracount != 0);
};

#- 5.3.2.4.2 Read Service <table-data> Pg. 26 ----------------------------------
# Same structure for write service as well.
type TableData = unit {
    count_m   : uint16;                  #need to handle when count == 0 pending length sent.
    data    : bytes &size=self.count_m;
    cksum   : uint8;
};

#- 5.3.2.4.3 Write Service <full-write> Pg. 27 ---------------------------------
type WriteReqFull = unit{
    tableid : uint16;
    table_m   : TableData;
    extra   : TableData if(self.table_m.count_m == 0xFFFF);
};

#- 5.3.2.4.3 Write Service <pwrite-index> Pg. 27 --------------------------------
type WriteReqPWrite = unit(count: uint64){
    tableid : uint16;
    index   : uint16[count];
    table_m   : TableData;
};

#- 5.3.2.4.3 Write Service <pwrite-offset> Pg. 27 ------------------------------
type WriteReqOffset = unit{
    tableid : uint16;
    offset  : bytes &size=3;
    table_m   : TableData;
};

#- 5.3.2.4.4 Logon Service <logon> Pg. 28 --------------------------------------
type LogonReq = unit{
    userid              : uint16;
    user                : bytes &size=10;
    reqSessionTimeout   : uint16;

    on %done{
        sessionContext = 1;
    }
};

#- 5.3.2.4.4 Logon Service <logon-r><ok> Pg. 29 --------------------------------
type LogonResp = unit{
    respSessionTimeout  : uint16;
};

#- 5.3.2.4.5 Security Service <security> Pg. 29 --------------------------------
type SecurityReq = unit{
    password    : bytes &size=20;
    userid      : uint16 if(sessionContext == 1);
};

#- 5.3.2.4.9 Wait Service <wait> Pg. 32 ----------------------------------------
type WaitReq = unit{
    timeis  : uint8;
};

#- 5.3.2.4.10 Registration Service <register> Pg. 33 ----------------------------
type RegisterReq = unit{

    var lastDevice  : uint8 = 0;
    var count       : uint64 = 0;

    nodetype: bitfield(8){
        relay               : 0;
        masterRelay         : 1;
        host                : 2;
        notificationHost    : 3;
        authenticationHost  : 4;
        endDevice           : 5;
        reserved            : 6;
        myDomainPatternFlag : 7;
    };

    connectiontype          : bitfield(8){
        broadcastAndMulticast   : 0;
        messageAcceptWindow     : 1;
        playbackRejection       : 2;
        reserved                : 3;
        connectionlessMode      : 4;
        acceptConnectionless    : 5;
        connectionMode          : 6;
        acceptConnections       : 7;
    };

    deviceClass : RelativeObjectIdentifier(4);

    apTitle  : ID;

    electronicSerialNumber: ID;

    addressLen          : uint8;
    nativeAddress       : bytes &size=self.addressLen;
    registrationPeriod  : bytes &size=3;
    myDomainPattern     : RegisterReqDomainPattern if(self.nodetype.myDomainPatternFlag == 1);

};

#- 5.3.2.4.10 Registration Service <my-domain-pattern> Pg. 37 ------------------
type RegisterReqDomainPattern = unit{
    notifPatternLen : uint8;
    notifPattern    : bytes &size=self.notifPatternLen;
};

#- 5.3.2.4.10 Registration Service <register-r><ok> Pg. 38 ---------------------
type RegisterRespOk = unit{
    apTitle  : ID;

    regDelay    : uint16;
    regPeriod   : bytes &size=3;
    regInfo     : bitfield(8){
        directMessagingAvailable    : 0;
        messageAcceptanceWindowMode : 1;
        playbackRejectionMode       : 2;
        reserved                    : 3;
        connectionlessMode          : 4;
        acceptConnectionless        : 5;
        connectionMode              : 6;
        acceptConnections           : 7;
    };
};

#- 5.3.2.4.11 Deregister Service <deregister> Pg. 40 ---------------------------
type DeregisterReq = unit{
    apTitle  : ID;
};

#- 5.3.2.4.12 Resolve Service <resolve> Pg. 41 ---------------------------------
type ResolveReq = unit{
    apTitle  : ID;
};

#- 5.3.2.4.12 Resolve Service <resolve-r><ok> Pg. 42 ---------------------------
type ResolveRespOk = unit{
    localAddrLen    : uint8;
    localAddr       : bytes &size=self.localAddrLen;
};

#- 5.3.2.4.13 Trace Service <trace> Pg. 41 ---------------------------------
type Trace = unit(len:uint64){

    trace: ID[] &size=len;

};



################################################################################
## 5.2 ASN1 Data Encoding Rules
################################################################################

#- 5.2.2 Length Fields Encoding Pg. 14 -----------------------------------------
type LengthType = unit {
  var len       : uint64;
  var tagLen    : uint8;

  data  : bitfield(8) {
    num     : 0..6;
    islong  : 7;
  };


  switch ( self.data.islong ) {
    0 -> : void {
      self.len = self.data.num;
      self.tagLen = 1;
    }
    1 -> : bytes &size=self.data.num
           &convert=$$.to_uint(spicy::ByteOrder::Network) {
      self.len = $$;
      self.tagLen = self.data.num + 1;
    }

    * -> : NotImplemented();
  };
};




#- 5.2.3 <*-id-element> Pg. 15 -----------------------------------------
type ID = unit{
    tag  : uint8 &convert=C1222_ENUMS::IdentifierTags($$);
    len  : LengthType;

    switch (self.tag){
        C1222_ENUMS::IdentifierTags::UNIVERSAL -> universalAptitleId : UniversalObjectIdentifier(self.len.len);
        C1222_ENUMS::IdentifierTags::RELATIVE  -> relativeAptitleId  : RelativeObjectIdentifier(self.len.len);

        * -> : NotImplemented();
    };

};

type UniversalObjectIdentifier = unit(len: uint64){
    var oidbytes: bytes;
    var temp: uint64;
    var oidstring: string;

    main: uint8 if (len >= 1 ) {
        self.temp = $$ / 40;
        self.oidbytes += ("%d" % (self.temp)).encode();
        self.temp = $$ % 40;
        self.oidbytes += (".%d" % (self.temp)).encode();
        self.temp = 0;
    }

    sublist : ObjectIdentifierNibble[len -1];

    on sublist foreach{
        self.temp = (self.temp<<7) | $$.data.num;
        if($$.data.more != 1){
            self.oidbytes += (".%d" % (self.temp)).encode();
            self.temp = 0;
        }
    }

    on %done {
        self.oidstring = self.oidbytes.decode();
    }
};

type RelativeObjectIdentifier = unit(len: uint64){
    var oidbytes: bytes;
    var temp: uint64;
    var oidstring: string;

    sublist : ObjectIdentifierNibble[len];

    on sublist foreach{
        self.temp = (self.temp<<7) | $$.data.num;
        if($$.data.more != 1){
            self.oidbytes += (".%d" % (self.temp)).encode();
            self.temp = 0;
        }
    }

    on %done {
        self.oidstring = self.oidbytes.decode();
    }
};

type ObjectIdentifierNibble = unit {
    data : bitfield(8) {
        num: 0..6;
        more: 7;
    };
};


type NotImplemented = unit() {
    : bytes &eod; # any remaining unparsed data
};
